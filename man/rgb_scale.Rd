% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scale_rgb.R
\name{rgb_scale}
\alias{rgb_scale}
\alias{scale_colour_rgb}
\alias{scale_fill_rgb}
\title{RGB scale}
\usage{
scale_colour_rgb(
  ...,
  na.value = "grey50",
  guide = "colourcube",
  limits = NULL,
  spectrum_limits = NULL,
  aesthetics = "colour"
)

scale_fill_rgb(
  ...,
  na.value = "grey50",
  guide = "none",
  limits = NULL,
  spectrum_limits = NULL,
  aesthetics = "fill"
)
}
\arguments{
\item{...}{Other arguments passed on to
\code{\link[ggplot2]{continuous_scale}()} to control name, breaks, labels
and so forth.}

\item{na.value}{A \code{character(1)} with the colour to use for missing
values.}

\item{guide}{Type of legend (not compatible yet).}

\item{limits}{One of the following: \itemize{
  \item{\code{NULL} to use the default scale range}.
  \item{A \code{rgb_spec} vector of length two providing limits of the
        scale. Use \code{NA} to refer to the existing minimum or maximum.}
  \item{A \code{function} that accepts the existing (automatic)
        \code{rgb_spec} limits and returns new limits in \code{rgb_spec}.}
}}

\item{spectrum_limits}{A \code{rgb_spec} vector of length two with channel
values between 0-1, to limit the ranges of the output channels.}

\item{aesthetics}{The names of the aesthetics that this scale works with.}
}
\value{
A \code{ScaleContinuousColourspec} ggproto object that can be added
  to a plot.
}
\description{
This specialised colour scale maps three variables to the red, green and blue
channels of the RGB colour space. This scale only works with colour and fill
aesthetics containing \code{rgb_spec} vectors.
}
\examples{
# `rgp_spec` automatically triggers the rgb scale
p <- ggplot(mtcars, aes(mpg, wt)) +
  geom_point(aes(colour = rgb_spec(drat, mpg, wt)))
p

# Limits need to be defined as a length 2 `rgb_spec` vector
p + scale_colour_rgb(limits = rgb_spec(c(0, NA), c(0, NA), c(0, NA)))

# The channel output can be limited with `spectrum_limits`
p + scale_colour_rgb(
  spectrum_limits = rgb_spec(c(0, 0), c(0, 1), c(0.25, 0.75))
)
}
\seealso{
The \code{\link[ggh4x]{rgb_spec}()} constructor.
}
